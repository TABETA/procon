export LANG=ja_JP.UTF-8

export HOME=/home/r-abe
export PROJ=${HOME}/proj
export PATH=${PROJ}/procon:$PATH
export PATH=${PROJ}/procon/sh:$PATH
export aclib=${PROJ}/procon/AtCoder/ac-library
export JDK_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
export PATH="$JDK_HOME:$PATH"

plugins=(zsh-completions)
autoload -U compinit && compinit

HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
setopt share_history
setopt hist_ignore_dups
setopt hist_verify
setopt extended_history
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt hist_no_store
setopt hist_expand

autoload -Uz compinit
compinit

autoload -Uz vcs_info
autoload -Uz colors
colors
setopt prompt_subst

zstyle ':vcs_info:*' formats "%F{green}%c%u(%b)%f"
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{magenta}!"
zstyle ':vcs_info:git:*' unstagedstr "%F{blue}+"
zstyle ':vcs_info:*' actionformats '[%b|%a]'

precmd () { vcs_info }

PROMPT="%{${fg[green]}%}[%n] %~%{${reset_color}%}
%# "

RPROMPT='${vcs_info_msg_0_} %{${fg[green]}%}%}%T%{${reset_color}%} '

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' ignore-parents parent pwd ..
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

limit coredumpsize 102400
setopt list_types
setopt auto_list
setopt extended_glob
setopt auto_menu
setopt equals
setopt magic_equal_subst
setopt numeric_glob_sort
setopt print_eight_bit
zstyle ':completion:*:default' menu select=1
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
setopt auto_param_keys
setopt auto_param_slash
setopt correct
DIRSTACKSIZE=100

at_home="${PROJ}/procon/AtCoder"
at_config="${at_home}/.atcodertools.toml"

atcoder-tools_gen_and_cd(){
    contest_name=$1
    config=$2
    working_dir=$3
    atcoder-tools gen $contest_name --config $config && cd ${working_dir}/${contest_name}
}

atg() {
  if [ $# = 1 ]; then
    #引数が1つの場合はコンテストのテンプレートを生成してそのフォルダへ移動し、A/main.cppを開く
    contest_name=$1
    atcoder-tools_gen_and_cd $contest_name $at_config $at_home && code "A/main.cpp"
  elif [ $# = 2 ]; then
    #引数が2つの場合はさらに問題を指定してコミット
    contest_name=$1
    problem=$2
    atcoder-tools_gen_and_cd $contest_name $at_config $at_home && git add $problem && git commit -m "Add ${contest_name}/${problem}" && git clean -fd && git checkout . && code "${problem}/main.cpp"
  else
    echo "Illegal argment number. allower agruments <= 2"
    exit 1
  fi
}
at-solved(){
  git add main.cpp && git commit -m "Solve $(pwd | sed "s|$at_home/||g")"
}
cpio(){
  cp in_1.txt in_$1.txt && code in_$1.txt
  cp out_1.txt out_$1.txt && code out_$1.txt
}

fetch_submission_result() {
  curl -s $URL | xmllint --html --xpath 'string(//td[@id="judge-status"])' - 2>/dev/null
}

colored_status_text() {
  local status_text="$1"
  local color_code=""

  case "$status_text" in
    AC)
      color_code="\\e[48;2;92;184;92m" # Green background
      ;;
    WA|TLE|RE|CE|MLE|IE|OLE)
      color_code="\\e[48;2;240;173;78m" # Orange
      ;;
    *)
      color_code="\\e[48;2;172;172;173m" # Gray background
      ;;
  esac

  echo -ne "${color_code}${status_text}\\e[0m"
}
ats() {
  TMP_FILE=$(mktemp)
  atcoder-tools submit -u $1 --config $at_config 2>&1 | tee $TMP_FILE
  URL=$(sed -r "s/\x1B\[[0-9;]*[mG]//g" $TMP_FILE | grep -oP '(?<=Done! ).*')

  if [ -n "$URL" ]; then
    echo "start polling."
    while true; do
      STATUS_TEXT=$(fetch_submission_result)
      COLORED_TEXT=$(colored_status_text "$STATUS_TEXT")
      echo -ne "$COLORED_TEXT\r"
      if [[ "$STATUS_TEXT" == "WA" || "$STATUS_TEXT" == "AC" || "$STATUS_TEXT" == "TLE" || "$STATUS_TEXT" == "RE" ]]; then
        echo "$COLORED_TEXT\\e[0K"
        break
      fi
      sleep 1
    done
  else
    echo "URL is not found."
  fi
  rm $TMP_FILE  
}
alias att="atcoder-tools test --exec ./a.out --config $at_config"
alias g="g++ -O3 -std=c++2b -I ${aclib} -Wall main.cpp -o ./main" 

test_interactive() {
  mkfifo pipe
  ./main < pipe | tee out.txt | ./judge | tee judge.txt > pipe
  rm pipe
}
e(){
  input_file=$1
  output_file_prefix="out/out_"
  base_name=$(basename "$input_file" .txt)
  output_file="${output_file_prefix}${base_name}.txt"
  ./main < "$input_file" > "$output_file"
  # less "$output_file"
}
ee(){
  input_dir=$1
  for input_file in $input_dir/*.txt; do
    e $input_file
  done
}
nopen() {
  # 引数が指定されているか確認
  if [ -z "$1" ]; then
    echo "ファイルパスを指定してください。"
    return 1
  fi

  # 第一引数からファイルパスを取得し、バックスラッシュをスラッシュに置き換える
  input_path="${1//\\//}"

  # ファイル名がmain.cppであるか確認
  if [[ "$(basename "$input_path")" != "main.cpp" ]]; then
    echo "main.cppファイルを指定してください。"
    return 1
  fi

  # 親フォルダを取得し、1文字進めたフォルダ名を作成
  parent_dir=$(basename "$(dirname "$input_path")")
  case $parent_dir in
    A) new_parent_dir="B" ;;
    B) new_parent_dir="C" ;;
    C) new_parent_dir="D" ;;
    D) new_parent_dir="E" ;;
    E) new_parent_dir="F" ;;
    F) new_parent_dir="G" ;;
    *) echo "無効な入力です。AからFのいずれかを入力してください。"
       return 1 ;;
  esac

  # 新しいファイルパスを構築
  target_path="$(dirname "$(dirname "$input_path")")/$new_parent_dir/main.cpp"

  # VSCodeでターゲットファイルを開く
  code "$target_path"
}
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
